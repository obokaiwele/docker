# Webroot
root /var/www/html/public;
index index.php index.html;

charset utf-8;

# Hide server version on error pages, and in response headers field
server_tokens off;

# SSL Certificates
ssl_certificate /etc/nginx/ssl/public.crt;
ssl_certificate_key /etc/nginx/ssl/private.key;

# Performance tuning that increases Time-To-First-Byte
ssl_buffer_size 8k;
ssl_session_tickets off;

# Protocol Support
ssl_protocols TLSv1.3 TLSv1.2 TLSv1.1 TLSv1;

# Cipher Strength
ssl_ciphers ECDH+AESGCM:ECDH+AES256:ECDH+AES128:DH+3DES:!ADH:!AECDH:!MD5;
ssl_prefer_server_ciphers on;

# Key exchange
ssl_dhparam /etc/nginx/ssl/dhparam-2048.pem;

# Override openssl default curve for ECDHE ciphers
ssl_ecdh_curve secp384r1;

# OCSP SSL Stapling
ssl_stapling on;
ssl_stapling_verify on;
resolver 127.0.0.11 8.8.8.8 8.8.4.4;

server {
    listen 80;
    listen [::]:80;
    server_name ${DOMAIN} www.${DOMAIN};

    # Path for Letsencrypt Certbot Challenges during renewal process
    location ~ /.well-known/acme-challenge {
        allow all;
    }

    return 301 https://${DOMAIN}$request_uri;
}

server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name www.${DOMAIN};
    return 301 https://${DOMAIN}$request_uri;
}

server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name ${DOMAIN};

    # SSL Sessions
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;

    # Security Headers
    add_header Strict-Transport-Security "max-age=31536000; includeSubdomains; preload";
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-Frame-Options "DENY" always;
    # add_header X-Frame-Options "SAMEORIGIN";

    # CSP Headers
    # add_header Content-Security-Policy "frame-src 'self'; default-src 'self'; script-src 'self' 'unsafe-inline' https://maxcdn.bootstrapcdn.com https://ajax.googleapis.com; img-src 'self'; style-src 'self' https://maxcdn.bootstrapcdn.com; font-src 'self' data: https://maxcdn.bootstrapcdn.com; form-action 'self'; upgrade-insecure-requests;" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;    

    gzip off;
    location = /favicon.ico { access_log off; log_not_found off; }
    location = /robots.txt  { access_log off; log_not_found off; }

    location / {
        try_files $uri $uri/ /index.php?$query_string;
    }

    location ~ \.php$ {
        resolver 127.0.0.11;    # Docker internal DNS
        # Use upstream as a variable so NGINX will startup even if the backend app is down
        set $upstream app:9000;

        try_files $uri =404;
        fastcgi_split_path_info ^(.+\.php)(/.+)$;
        fastcgi_pass $upstream;
        fastcgi_index index.php;
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_param PATH_INFO $fastcgi_path_info;
    }

    location ~ /\.(?!well-known).* {
        deny all;
    }
}
